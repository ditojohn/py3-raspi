#!/usr/bin/env python

#--------------------------------------------------------------------------------------------------
# File name   : devicecontrol.py
# Description : Generic GPIO device controller library
# Author      : Dito Manavalan
# Date        : 2015/12/03
#--------------------------------------------------------------------------------------------------

import RPi.GPIO as GPIO

# Device type constants
DEVICE_TYPE_INPUT = 1
DEVICE_TYPE_OUTPUT = 2

# Circuit type constants
CIRCUIT_TYPE_POSITIVE = 1                                  # POSITIVE circuit type indicates a GPIO.HIGH turns the device on
CIRCUIT_TYPE_NEGATIVE = 2                                  # NEGATIVE circuit type indicates a GPIO.LOW turns the device on

class Device(object):
    """
    Any electronic device like an LED or Active Buzzer 
    that can be controlled by the GPIO module.
    They have the following attributes:
        name: A string representing the device's name
        type: An integer representing the device's input/output type
        circuit_type: An integer representing the device's circuit type
        channel: An integer representing the GPIO channel or pin used by the device
        channel_mode: An integer representing the GPIO mode (GPIO.OUT/GPIO.IN) used by the device
        default_state: An integer representing the device's default state, determined by the circuit_type
        state: An integer representing the device's current state
    """
    def __init__(self, name, type, circuit_type, channel):
        self.name = name
        self.type = type
        self.circuit_type = circuit_type
        self.channel = channel
        if type == DEVICE_TYPE_INPUT:
            self.channel_mode = GPIO.IN
        elif type == DEVICE_TYPE_OUTPUT:
            self.channel_mode = GPIO.OUT
        else:
            self.channel_mode = -1
            raise RuntimeError('Invalid device type specified.')
        if circuit_type == CIRCUIT_TYPE_POSITIVE:
            self.default_state = GPIO.LOW
        elif circuit_type == CIRCUIT_TYPE_NEGATIVE:
            self.default_state = GPIO.HIGH
        else:
            self.default_state = -1
            raise RuntimeError('Invalid circuit type specified.')
        GPIO.setmode(GPIO.BOARD)                                                    # Numbers pins by physical location            
        GPIO.setup(self.channel, self.channel_mode, initial=self.default_state)     # Set pin, I/O mode and initial state as default (off)
        self.state = self.default_state

    def switch(self, switch_mode):
        if switch_mode == "ON":
            self.state = not self.default_state                           # device on
        elif switch_mode == "OFF":
            self.state = self.default_state                               # device off
        elif switch_mode == "TOGGLE":
            self.state = not self.state                                   # device toggle
        else:
            self.state = self.default_state                               # device off
        GPIO.output(self.channel, self.state)

    def close(self):
        self.switch("OFF")
        GPIO.cleanup()                                                    # Release resource
        self.name = "Unknown"
        self.type = -1
        self.circuit_type = -1
        self.channel = -1
        self.channel_mode = -1
        self.default_state = -1
        self.state = -1

    def __del__(self):
        self.close()