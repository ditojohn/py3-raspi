#!/usr/bin/env python

#--------------------------------------------------------------------------------------------------
# File name   : 001_led_controller.py
# Description : Multi-threaded I/O program to read commands from stdin to control an LED
# Author      : Dito Manavalan
# Date        : 2015/12/02
#--------------------------------------------------------------------------------------------------

#==================================================================
# Circuit Diagram
#==================================================================
# LED
#     Anode > 220 Resistor > GPIO Pin 1 (3.3V)
#     Cathode > GPIO Pin 11 (GPIO17)
#
# Apply HIGH to turn OFF, LOW to turn ON
#==================================================================
# Formulae and Notes
#==================================================================
# R = U / I = 3.3V / (5~20mA) = 165~660 = 220
#
# LED Pin Identification:
# Anode: Positive, Longer pin
# Cathode: Negative, Shorter pin, Pin near the flat edge
#==================================================================

import threading
import time
import rpi2lib.gpio.devicecontroller as GDC

cntlrDevice = "LED"
cntlrCircuitType = "NEGATIVE"
cntlrPin = 11                                        # set pin # 11

cntlrName = "RPi2 " + cntlrDevice + " Controller"
cntlrCommand = "OFF"
cntlrInputCommandReadFlag = True
cntlrOutputCommandScanDelay = 0.5
cntlrBlinkDelay = 0.5

class inputThread (threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
    def run(self):
        #print "Starting " + self.name + "\n"
        capture_input(self.name)
        #print "Exiting " + self.name + "\n"

def capture_input(threadName):
    global cntlrInputCommandReadFlag
    global cntlrCommand
    while True:
        if cntlrInputCommandReadFlag == False:
            break
        rawCommand = raw_input(cntlrDevice + ":" + cntlrCommand.ljust(6) + " > ").upper()
        if rawCommand in ["ON", "OFF", "BLINK", "EXIT"]:
        	cntlrCommand = rawCommand
        else:
        	print "! Unknown command", rawCommand
        if cntlrCommand == "EXIT":
            cntlrInputCommandReadFlag = False

class outputThread (threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
    def run(self):
        #print "Starting " + self.name + "\n"
        display_output(self.name)
        #print "Exiting " + self.name + "\n"

def display_output(threadName):
    global cntlrInputCommandReadFlag
    global cntlrOutputCommandScanDelay
    global cntlrPin
    global cntlrCommand
    global cntlrBlinkDelay
    GDC.device_initialize(cntlrDevice, cntlrCircuitType, cntlrPin)
    while True:
        if cntlrInputCommandReadFlag == False:
            break
        elif cntlrCommand == "ON" or cntlrCommand == "OFF":
            GDC.device_switch(cntlrCommand)
        elif cntlrCommand == "BLINK":
            while cntlrCommand == "BLINK":
                GDC.device_switch("TOGGLE")
                time.sleep(cntlrBlinkDelay)
        else:
            GDC.device_switch("OFF")
        time.sleep(cntlrOutputCommandScanDelay)
    GDC.device_finalize()


print "[" + cntlrName + ": ON/OFF/BLINK]"

# Create new threads
threadRead = inputThread(1, "Thread-Read")
threadWrite = outputThread(2, "Thread-Write")

# Start new Threads
threadRead.start()
threadWrite.start()
