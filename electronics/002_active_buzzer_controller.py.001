#!/usr/bin/env python

#--------------------------------------------------------------------------------------------------
# File name   : 002_active_buzzer_controller.py
# Description : Multi-threaded I/O program to read commands from stdin to control an active buzzer
# Author      : Dito Manavalan
# Date        : 2015/12/02
#--------------------------------------------------------------------------------------------------

#==================================================================
# Circuit Diagram
#==================================================================
# Active Buzzer
#     Anode > GPIO Pin 1 (3.3V)
#     Cathode > S8050 NPN Transistor - Collector
#                   Emitter > GPIO Pin 6 (GND)
#                   Base > 1k Resistor > GPIO Pin 11 (GPIO17)
#
# Apply LOW to turn OFF, HIGH to turn ON
#==================================================================
# Formulae and Notes
#==================================================================
# Active Buzzer Pin Identification:
# Anode: Positive, Longer pin, (+) Polarity marking
# Cathode: Negative, Shorter pin
#
# NPN Transistor Pin Identification:
# Facing the flat side with pins pointing downwards,
# Emitter: Left
# Base: Middle
# Collector: Right
#==================================================================

import threading
import time
import rpi2lib.gpio.devicecontrol as GDC

cntlrDevice = "Active Buzzer"
cntlrDeviceType = GDC.DEVICE_TYPE_OUTPUT
cntlrCircuitType = GDC.CIRCUIT_TYPE_POSITIVE
cntlrPin = 11                                        # set pin # 11

cntlrName = "RPi2 " + cntlrDevice + " Controller"
cntlrCommand = "OFF"
cntlrInputCommandReadFlag = True
cntlrOutputCommandScanDelay = 0.5
cntlrBlinkDelay = 0.5

class inputThread (threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
    def run(self):
        #print "Starting " + self.name + "\n"
        capture_input(self.name)
        #print "Exiting " + self.name + "\n"

def capture_input(threadName):
    global cntlrInputCommandReadFlag
    global cntlrCommand
    while True:
        if cntlrInputCommandReadFlag == False:
            break
        rawCommand = raw_input(cntlrDevice + ":" + cntlrCommand.ljust(6) + " > ").upper()
        if rawCommand in ["ON", "OFF", "BEEP", "EXIT"]:
        	cntlrCommand = rawCommand
        else:
        	print "! Unknown command", rawCommand
        if cntlrCommand == "EXIT":
            cntlrInputCommandReadFlag = False

class outputThread (threading.Thread):
    def __init__(self, threadID, name):
        threading.Thread.__init__(self)
        self.threadID = threadID
        self.name = name
    def run(self):
        #print "Starting " + self.name + "\n"
        display_output(self.name)
        #print "Exiting " + self.name + "\n"

def display_output(threadName):
    global cntlrInputCommandReadFlag
    global cntlrOutputCommandScanDelay
    global cntlrPin
    global cntlrCommand
    global cntlrBlinkDelay

    activeBuzzerDevice = GDC.Device(cntlrDevice, cntlrDeviceType, cntlrCircuitType, cntlrPin)
    while True:
        if cntlrInputCommandReadFlag == False:
            break
        elif cntlrCommand == "ON" or cntlrCommand == "OFF":
            activeBuzzerDevice.switch(cntlrCommand)
        elif cntlrCommand == "BEEP":
            while cntlrCommand == "BEEP":
                activeBuzzerDevice.switch("TOGGLE")
                time.sleep(cntlrBlinkDelay)
        else:
            activeBuzzerDevice.switch("OFF")
        time.sleep(cntlrOutputCommandScanDelay)

print "[" + cntlrName + ": ON/OFF/BEEP]"

# Create new threads
threadRead = inputThread(1, "Thread-Read")
threadWrite = outputThread(2, "Thread-Write")

# Start new Threads
threadRead.start()
threadWrite.start()
